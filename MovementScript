-- HOLD \ OR ; TO UNLOCK MOUSE --

local players = game:GetService("Players")
local uis = game:GetService("UserInputService")
local cam = workspace.CurrentCamera
local plr = players.LocalPlayer or players.PlayerAdded:Wait()
local mouse = plr:GetMouse()
local chr = plr.Character or plr.CharacterAdded:Wait()
local hrp = chr:WaitForChild("HumanoidRootPart")
local hmd = chr:WaitForChild("Humanoid")
local resetVisibility
local setSpeed = hmd.WalkSpeed
function setwalkspeed(hmd)
	hmd.WalkSpeed = setSpeed
end
local setJumpheight
if hmd.UseJumpPower then
	setJumpheight = hmd.JumpPower
	function setjumpheight(hmd)
		hmd.JumpPower = setJumpheight
	end
else
	setJumpheight = hmd.JumpHeight
	function setjumpheight(hmd)
		hmd.JumpHeight = setJumpheight
	end
end
local params = RaycastParams.new()
params.FilterDescendantsInstances = {chr}
plr.CharacterAdded:Connect(function(char)
	resetVisibility()
	chr = char
	hrp = char:WaitForChild("HumanoidRootPart")
	hmd = char:WaitForChild("Humanoid")
	cam = workspace.CurrentCamera
	setwalkspeed(hmd)
	hmd:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
		setwalkspeed(hmd)
	end)
	setjumpheight(hmd)
	hmd:GetPropertyChangedSignal("JumpHeight"):Connect(function()
		setJumpheight(hmd)
	end)
	plr.CharacterAppearanceLoaded:Wait()
	params.FilterDescendantsInstances = {char}
end)
local function checkFloor()
	local cast = workspace:Raycast(hrp.CFrame.Position,Vector3.new(0,-4,0).Unit,params)
	if cast then
		hrp.CFrame = CFrame.new(Vector3.new(0,5,0)+cast.Position)
	end
end
local function stopMovement()
	hrp.Velocity = Vector3.new(0,0,0)
	task.wait()
end

-- CREATING PRESETS --

local presets = Instance.new("Folder")

local toggle = Instance.new("Frame",presets)
toggle.Name = "toggle"
toggle.Visible = false
toggle.BackgroundTransparency = 1
toggle.Size = UDim2.new(1,0,0,15)

local button = Instance.new("ImageButton",toggle)
button.Name = "button"
button.BackgroundTransparency = 1
button.Size = UDim2.new(0,15,1,0)
button.Position = UDim2.new(0.04,0,0,0)
button.Image = "rbxassetid://14300228791"
button.ScaleType = Enum.ScaleType.Fit
button.AutoButtonColor = false

local hider = Instance.new("Frame",button)
hider.Name = "hider"
hider.BackgroundColor3 = Color3.fromRGB(25,25,25)
hider.Size = UDim2.new(0.45,0,0.45,0)
hider.Position = UDim2.new(0.5,0,0.5,0)
hider.AnchorPoint = Vector2.new(0.5,0.5)
hider.BorderSizePixel = 0

local desc = Instance.new("TextLabel",toggle)
desc.Name = "desc"
desc.BackgroundTransparency = 1
desc.Size = UDim2.new(0.8,0,1,0)
desc.Position = UDim2.new(0.15,0,0,0)
desc.TextColor3 = Color3.fromRGB(200,200,200)
desc.TextScaled = true
desc.TextXAlignment = Enum.TextXAlignment.Right

local input = Instance.new("Frame",presets)
input.Name = "input"
input.Visible = false
input.BackgroundTransparency = 1
input.Size = UDim2.new(1,0,0,15)

local box = Instance.new("TextBox",input)
box.Name = "box"
box.BackgroundColor3 = Color3.fromRGB(35,35,35)
box.Size = UDim2.new(0,35,1,0)
box.Position = UDim2.new(0.02,0,0,0)
box.TextColor3 = Color3.fromRGB(200,200,200)
box.Text = ""
box.TextScaled = true
box.ClearTextOnFocus = false
Instance.new("UICorner",box).CornerRadius = UDim.new(0.3,0)

local desc = Instance.new("TextLabel",input)
desc.Name = "desc"
desc.BackgroundTransparency = 1
desc.Size = UDim2.new(0.8,0,1,0)
desc.Position = UDim2.new(0.15,0,0,0)
desc.TextColor3 = Color3.fromRGB(200,200,200)
desc.TextScaled = true
desc.TextXAlignment = Enum.TextXAlignment.Right

local main
local order = 0

local function createRow(sort: string, desc: string, boxText: string?, large: boolean?)
	local row = presets[sort]:Clone()
	row.Visible = true
	row.Parent = main
	row.LayoutOrder = order
	order += 1
	row:WaitForChild("desc").Text = desc
	if sort == "input"then
		local box = row:WaitForChild("box")
		if boxText then
			box.Text = boxText
		end
		if large then
			box.Size = UDim2.new(0,110,1,0)
		end
	end
	return row
end

local function setFuncs(row: Frame, ...: any)
	if row.Name == "input" then
		for _, func in pairs({...}) do
			local box = row:WaitForChild("box")
			local lastText = box.Text
			box.Focused:Connect(function()
				lastText = box.Text
				box.Text = ""
			end)
			box.FocusLost:Connect(function(enter)
				if enter then
					func()
				else
					box.Text = lastText
				end
			end)
		end
	elseif row.Name == "toggle" then
		for _, func in pairs({...}) do
			local button = row:WaitForChild("button")
			local hider = button:WaitForChild("hider")
			button.MouseButton1Down:Connect(function()
				hider.Visible = not hider.Visible
				func()
			end)
		end
	end
end

-- CREATING GUI --

local gui = Instance.new("ScreenGui",plr.PlayerGui)
gui.Name = "MovementHacks"
gui.ResetOnSpawn = false
gui.DisplayOrder = -999
gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

local modalButton = Instance.new("TextButton",gui)
modalButton.Text = ""
modalButton.Modal = true
modalButton.BackgroundTransparency = 1
modalButton.Size = UDim2.new(1,0,1,0)
modalButton.ZIndex = 0
modalButton.Visible = false

local bg = Instance.new("Frame",gui)
bg.BackgroundColor3 = Color3.fromRGB(25,25,25)
bg.Size = UDim2.new(0.2,0,0.5,0)
bg.Position = UDim2.new(0.73,0,0.967,0)
bg.ClipsDescendants = true
Instance.new("UICorner",bg).CornerRadius = UDim.new(0.03,0)
Instance.new("UIStroke",bg)

local top = Instance.new("Frame",bg)
top.Size = UDim2.new(1.02,0,0.06,0)
top.Position = UDim2.new(-0.01,0,0,0)
top.BackgroundTransparency = 1
Instance.new("UIStroke",top).Color = Color3.fromRGB(40,40,40)

local closebtn = Instance.new("TextButton",top)
closebtn.BackgroundTransparency = 1
closebtn.Size = UDim2.new(0.1,0,1,0)
closebtn.Position = UDim2.new(0.9,0,0,0)
closebtn.Text = "X"
closebtn.TextColor3 = Color3.fromRGB(200,200,200)
closebtn.TextScaled = true

local togglebtn = Instance.new("TextButton",top)
togglebtn.BackgroundTransparency = 1
togglebtn.Size = UDim2.new(0.1,0,1,0)
togglebtn.Position = UDim2.new(0.82,0,0,0)
togglebtn.Text = "↑↓"
togglebtn.TextColor3 = Color3.fromRGB(200,200,200)
togglebtn.TextScaled = true

local text = Instance.new("TextLabel",top)
text.BackgroundTransparency = 1
text.Size = UDim2.new(0.65,0,0.7,0)
text.Position = UDim2.new(0,0,0.15,0)
text.Text = "Movement hacks"
text.TextColor3 = Color3.fromRGB(200,200,200)
text.TextScaled = true

main = Instance.new("ScrollingFrame",bg)
main.BackgroundTransparency = 1
main.Size = UDim2.new(1,0,0.8,0)
main.Position = UDim2.new(0,0,0.1,0)
main.ScrollBarThickness = 5
main.ElasticBehavior = Enum.ElasticBehavior.Never
main.AutomaticCanvasSize = Enum.AutomaticSize.Y
local layout = Instance.new("UIListLayout",main)
layout.Padding = UDim.new(0,5)
layout.SortOrder = Enum.SortOrder.LayoutOrder
local padding = Instance.new("UIPadding",main)
padding.PaddingLeft = UDim.new(0.03,0)
padding.PaddingRight = UDim.new(0.07,0)

-- GUI FUNCTIONALITY --

local ts = game:GetService("TweenService")
local toggleInfo = TweenInfo.new(0.7,Enum.EasingStyle.Quad,Enum.EasingDirection.InOut,0,false)
local toggleClose = ts:Create(bg,toggleInfo,{Position = UDim2.new(0.73,0,0.967,0)})
local toggleOpen = ts:Create(bg,toggleInfo,{Position = UDim2.new(0.73,0,0.52,0)})

local toggleDebounce = false
closebtn.MouseButton1Down:Connect(function()
	toggleDebounce = true
	ts:Create(bg,TweenInfo.new(0.5,Enum.EasingStyle.Quart,Enum.EasingDirection.Out,0,false),{Position = UDim2.new(0.73,0,1.02,0)}):Play()
	wait(0.5)
	gui:Destroy()
	script:Destroy()
end)
local minimized = true
togglebtn.MouseButton1Down:Connect(function()
	if not toggleDebounce then
		toggleDebounce = true
		minimized = not minimized
		if minimized then
			toggleClose:Play()
		else
			toggleOpen:Play()
		end
		wait(0.7)
		toggleDebounce = false
	end
end)

local oldIcon
uis.InputBegan:Connect(function(input,gpe)
	if not gpe and (input.KeyCode == Enum.KeyCode.BackSlash or input.KeyCode == Enum.KeyCode.Semicolon) then
		oldIcon = mouse.Icon
		mouse:Destroy()
		modalButton.Visible = true
	end
end)
uis.InputEnded:Connect(function(input,gpe)
	if not gpe and (input.KeyCode == Enum.KeyCode.BackSlash or input.KeyCode == Enum.KeyCode.Semicolon) then
		mouse.Icon = oldIcon
		modalButton.Visible = false
	end
end)

-- CREATING ROWS --

local holding = {}
local keyW = Enum.KeyCode.W
local keyA = Enum.KeyCode.A
local keyS = Enum.KeyCode.S
local keyD = Enum.KeyCode.D
local WASD = {keyW,keyA,keyS,keyD}
uis.InputBegan:Connect(function(key)
	if table.find(WASD,key.KeyCode) then
		table.insert(holding,key.KeyCode)
	end
end)
uis.InputEnded:Connect(function(key)
	if table.find(WASD,key.KeyCode) then
		table.remove(holding,table.find(holding,key.KeyCode))
	end
end)

local function getPlayer(name)
	if name ~= "" then
		local partial = nil
		for _,player in pairs(players:GetChildren()) do
			local lowername = string.lower(player.Name)
			if string.match(lowername,name) then
				if lowername == name then
					return player
				else
					partial = player
				end
			end
		end
		if partial then
			return partial
		end
	end
	return nil
end


local teleportRow = createRow("input", "Teleport to", "", true)
local teleportBox = teleportRow:WaitForChild("box")
local function teleportFunc()
	local plr = getPlayer(box.Text)
	if plr then
		box.Text = plr.Name
		if plr.Character and plr.Character.PrimaryPart then
			hrp.CFrame = plr.Character:GetPrimaryPartCFrame()
		end
	end
end
setFuncs(teleportRow, teleportFunc)

local walkspeedRow = createRow("input", "Walkspeed", tostring(math.round(tonumber(setSpeed)*10)/10))
local function walkspeedFunc()
	local num = math.round(tonumber(walkspeedRow.box.Text)*10)/10
	walkspeedRow.box.Text = num
	if num then
		setSpeed = num
		setwalkspeed(hmd)
	end
end
setFuncs(walkspeedRow, walkspeedFunc)

local jumpheightRow = createRow("input", "Jump height", tostring(math.round(setJumpheight*10)/10))
local function jumpheightFunc()
	local num = math.round(tonumber(jumpheightRow.box.Text)*10)/10
	jumpheightRow.box.Text = num
	if num then
		setJumpheight = num
		setjumpheight(hmd)
	end
end
setFuncs(jumpheightRow, jumpheightFunc)

local flyspeed = 1
local flyspeedRow = createRow("input", "Fly speed", "1")
local function flyspeedFunc()
	local num = tonumber(flyspeedRow.box.Text)
	if num then
		flyspeed = num
	end
end
setFuncs(flyspeedRow, flyspeedFunc)

local flyRow = createRow("toggle", "Fly (invisible)")
local flyhider = flyRow:WaitForChild("button"):WaitForChild("hider")
local ghosthider
local anchorhider
local flyVis = true
local ghostVis = true
flyhider:GetPropertyChangedSignal("Visible"):Connect(function()
	flyVis = flyhider.Visible
end)
local function flyFunc()
	if flyVis and anchorhider.Visible then
		checkFloor()
		stopMovement()
		hrp.Anchored = false
	elseif ghostVis then
		hrp.Anchored = true
		repeat
			task.wait()
			hrp.CFrame = cam.CFrame + (hrp.Position-cam.CFrame.Position)
			for i,v in pairs(holding) do
				if v == keyW or v == keyS then
					hrp.CFrame += hrp.CFrame.LookVector * (v == keyW and flyspeed or -flyspeed)
				elseif v == keyA or v == keyD then
					hrp.CFrame *= CFrame.new((v == keyD and flyspeed or -flyspeed),0,0)
				end
			end
		until flyVis
	else
		flyhider.Visible = true
	end
end
setFuncs(flyRow, flyFunc)

local ghostPart = Instance.new("Part",workspace)
ghostPart.Size = Vector3.new(1,1,1)
ghostPart.Transparency = 1
ghostPart.Anchored = true
ghostPart.CanQuery = false
ghostPart.CanCollide = false
ghostPart.CanTouch = false
local oldCamsubject = nil
local ghostRow = createRow("toggle", "Ghost")
ghosthider = ghostRow:WaitForChild("button"):WaitForChild("hider")
ghosthider:GetPropertyChangedSignal("Visible"):Connect(function()
	ghostVis = ghosthider.Visible
end)
cam:GetPropertyChangedSignal("CameraSubject"):Connect(function()
	if not ghosthider.Visible then
		cam.CameraSubject = ghostPart
	end
end)
local function ghostFunc()
	if ghostVis then
		if anchorhider.Visible then
			hrp.Anchored = false
		end
		cam.CameraSubject = oldCamsubject
		ghostPart.Transparency = 1
	elseif flyVis then
		hrp.Anchored = true
		ghostPart.Transparency = 0.8
		oldCamsubject = cam.CameraSubject
		cam.CameraSubject = ghostPart
		ghostPart.CFrame = hrp.CFrame
		repeat
			task.wait()
			ghostPart.CFrame = cam.CFrame + (ghostPart.Position-cam.CFrame.Position)
			for i,v in pairs(holding) do
				if v == keyW or v == keyS then
					ghostPart.CFrame += ghostPart.CFrame.LookVector * (v == keyW and flyspeed or -flyspeed)
				elseif v == keyA or v == keyD then
					ghostPart.CFrame *= CFrame.new((v == keyD and flyspeed or -flyspeed),0,0)
				end
			end
		until ghostVis
	else
		ghosthider.Visible = true
	end
end
setFuncs(ghostRow, ghostFunc)

local infjumpFunction = nil
local infjumpRow = createRow("toggle", "Infinite jump")
local infjumphider = infjumpRow:WaitForChild("button"):WaitForChild("hider")
local safeinfjumphider
local function infjumpFunc()
	if safeinfjumphider.Visible then
		if infjumphider.Visible == false then
			infjumpFunction = uis.JumpRequest:Connect(function()
				hmd:ChangeState(Enum.HumanoidStateType.Jumping,true)
			end)
		elseif infjumpFunction then
			infjumpFunction:Disconnect()
			infjumpFunction = nil
		end
	end
end
setFuncs(infjumpRow, infjumpFunc)

local safeinfjumpFunction = nil
local safeinfjumpRow = createRow("toggle", "Safe infinite jump")
safeinfjumphider = safeinfjumpRow:WaitForChild("button"):WaitForChild("hider")
local function safeinfjumpFunc()
	if infjumphider.Visible then
		if safeinfjumphider.Visible == false then
			safeinfjumpFunction = uis.JumpRequest:Connect(function()
				hmd:ChangeState(Enum.HumanoidStateType.Landed,true)
				task.wait()
				hmd:ChangeState(Enum.HumanoidStateType.Jumping,true)
			end)
		elseif safeinfjumpFunction then
			safeinfjumpFunction:Disconnect()
			safeinfjumpFunction = nil
		end
	end
end
setFuncs(safeinfjumpRow, safeinfjumpFunc)

local clicktpFunction1
local clicktpFunction2
local clicktpFunction3
local clicktpHolding = false
for i,v in pairs(workspace:GetDescendants()) do
	if v:IsA("BasePart") and v.CanCollide == false then
		v.CanQuery = false
		v:GetPropertyChangedSignal("CanQuery"):Connect(function()
			v.CanQuery = false
		end)
	end
end
workspace.ChildAdded:Connect(function(child)
	wait(1)
	if child:IsA("BasePart") and child.CanCollide == false then
		child.CanQuery = false
		child:GetPropertyChangedSignal("CanQuery"):Connect(function()
			child.CanQuery = false
		end)
	end
end)
local clicktpRow = createRow("toggle", "Ctrl+click tp")
local clicktphider = clicktpRow:WaitForChild("button"):WaitForChild("hider")
local function clicktpFunc()
	if clicktphider.Visible == false then
		clicktpFunction1 = uis.InputBegan:Connect(function(input)
			if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
				clicktpHolding = true
			end
		end)
		clicktpFunction2 = uis.InputEnded:Connect(function(input)
			if input.KeyCode == Enum.KeyCode.LeftControl or input.KeyCode == Enum.KeyCode.RightControl then
				clicktpHolding = false
			end
		end)
		clicktpFunction3 = mouse.Button1Down:Connect(function()
			if clicktpHolding then
				hrp.CFrame = CFrame.new(mouse.Hit.Position+Vector3.new(0,4,0))
				stopMovement()
			end
		end)
	else
		clicktpFunction1:Disconnect()
		clicktpFunction2:Disconnect()
		clicktpFunction3:Disconnect()
	end
end
setFuncs(clicktpRow, clicktpFunc)

for i,v in pairs(chr:GetChildren()) do
	if v:IsA("MeshPart") then
		v.CanQuery = false
		v:GetPropertyChangedSignal("CanQuery"):Connect(function()
			v.CanQuery = false
		end)
	end
end
local standardCancollide = {}
local noclipRow = createRow("toggle", "NoClip")
local nocliphider = noclipRow:WaitForChild("button"):WaitForChild("hider")
for i,v in pairs(chr:GetChildren()) do
	if v:IsA("BasePart") and v.CanCollide then
		table.insert(standardCancollide,v)
	end
end
local function noclipFunc()
	if not nocliphider.Visible then
		repeat
			wait()
			for i,v in pairs(standardCancollide) do
				v.CanCollide = false
			end
		until nocliphider.Visible
	else
		wait(0.5)
		for i,v in pairs(standardCancollide) do
			v.CanCollide = true
		end
	end
end
setFuncs(noclipRow, noclipFunc)

local anchorRow = createRow("toggle", "Anchor character")
anchorhider = anchorRow:WaitForChild("button"):WaitForChild("hider")
local function anchorFunc()
	if anchorhider.Visible == false then
		hrp.Anchored = true
	elseif flyhider.Visible and ghosthider.Visible then
		hrp.Anchored = false
	end
end
setFuncs(anchorRow, anchorFunc)
hrp:GetPropertyChangedSignal("Anchored"):Connect(function()
	if anchorhider.Visible == false then
		checkFloor()
		stopMovement()
		hrp.Anchored = false
	end
end)

local targetPlayer = nil
local followhider
local targetRow = createRow("input", "Target player", "", true)
local targetBox = targetRow:WaitForChild("box")
local function targetFunc()
	targetPlayer = getPlayer(targetBox.Text)
	targetBox.Text = targetPlayer.Name
end
setFuncs(targetRow, targetFunc)

local followRow = createRow("toggle", "Follow target")
followhider = followRow:WaitForChild("button"):WaitForChild("hider")
local function followFunc()
	if targetPlayer then
		if not followhider.Visible then
			local hmrp = targetPlayer.Character:FindFirstChild("HumanoidRootPart") or nil
			if not hmrp then
				followhider.Visible = true
				return
			end
			hmrp.Destroying:Connect(function()
				followhider.Visible = true
			end)
			stopMovement()
			repeat
				task.wait()
				hrp.CFrame = hmrp.CFrame
			until followhider.Visible
		end
	end
end
setFuncs(followRow, followFunc)

resetVisibility = function()
	for i,v in pairs(main:GetChildren()) do
		if v.Name == "toggle" and v.button.hider.Visible == false then
			v.button.hider.Visible = true
		end
	end
end
